---
title: "class 13 Transcriptomics and the analysis of RNA-Seq data"
author: "Trinity Lee A16639698"
format: pdf
---

The data for this hands-on session comes from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

##2. Bioconductor setup
```{r}
library(BiocManager)
library(DESeq2)
```
##3. Import countData and colData

```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
head(counts)
head(metadata)
```

Q1. How many genes are in this dataset?
```{r}
nrow(counts)
```

Q2. How many ‘control’ cell lines do we have?
```{r}
table(metadata$dex)
```

##4. Toy differential gene expression
Let's start by calculating the gene mean counts for "control" samples and compare to the mean counts per gene for the "treated" values. 

Let's start with the finding which columns in `counts` are control samples then calculate the mean value:
```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4
head(control.mean)
```
 An alternative way to do this same thing using the `dplyr` package from the tidyverse is shown below. Which do you prefer and why?
 
```{r}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)
```
I prefer not using the dplyr package since the library does not have to be loaded before use and less typing is used in order to accomplish the same task.

Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 

using `rowMeans` function instead of `rowSums`
```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowMeans( control.counts )
head(control.mean)
```


Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated.mean <- rowMeans( counts[ ,treated$id] ) 
head(treated.mean)
```
combine meancount data and show the sum of the mean counts for all genes for each group
```{r}
meancounts <- data.frame(control.mean, treated.mean)
colSums(meancounts)
```

Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. 
```{r}
plot(meancounts)
```

Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

```{r}
library(ggplot2)
ggplot(meancounts)+aes(control.mean,treated.mean)+geom_point()
```
Wait a sec. There are 60,000-some rows in this data, but I’m only seeing a few dozen dots at most outside of the big clump around the origin.

Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(log(meancounts))
```

```{r}
ggplot(meancounts)+aes(control.mean,treated.mean)+geom_point()+scale_x_continuous(trans="log2")+scale_y_continuous(trans="log2")
```

Log transformation is useful when data is skewed and measured over a wide range. Log 2 is the most prefered. 

Here we calculate log2foldchange, add it to our meancounts data.frame and inspect the results either with the head() or the View() function for example.

```{r}
meancounts$log2fc <-log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

Let's filter our data to remove genes with zero expression to get rid of "NaN"and "-Inf" results

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)
to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```
Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The `arr.ind` function allows us to identify the genes and samples that have zero counts so that we can ignore them and focus on the `row` answer to get rid of any "NaN" or "-Inf" results. The `unique()` function is called to make sure that the row is not counted twice is there is zero for both samples. 

A common threshold used for calling something differentially expressed is a log2(FoldChange) of greater than 2 or less than -2. Let’s filter the dataset both ways to see how many genes are up or down-regulated.

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```
Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

```{r}
sum(up.ind)

```

Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

```{r}
sum(down.ind)
```

Q10. Do you trust these results? Why or why not?

no because we do not know how to compare these results to know whether the difference is statsitically significant.

##5. Setting up for DESeq
like any pacakge we must load it with `library()`

```{r}
library(DESeq2)
citation("DESeq2")
```

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds<-DESeq(dds)
res<-results(dds)
head(res)
```
# A summary results plot 

Volcano plot.

This is a plot that is a common type of summary figure that shows both P-values and Log2(fold-changes).

```{r}
plot(res$log2FoldChange,-log(res$padj),xlab="log2(FoldChange",ylab="-Log(P-value)")
abline(v=2,col="red")
abline(v=-2,col="red")
abline(h=-log(0.05),col="blue")
```
Create a nicer plot using ggplot
```{r}
# Extract results as a data frame
results_df <- as.data.frame(res)

# Create a ggplot
ggplot(results_df, aes(x = log2FoldChange, y = -log(padj))) +
  geom_point() +
  labs(x = "log2(FoldChange)", y = "-Log(P-value)") +
  geom_vline(xintercept = c(-2, 2), color = "red") +
  geom_hline(yintercept = -log(0.05), color = "blue")
```

Save our results to date ...

```{r}
write.csv(res,file="deseq_results.csv")
```


