---
title: "class 08 Mini-project"
author: "Trinity Lee A16639698"
format: pdf
---
##Outline
Today we will explore a complete analysis using the unsupervised learning techniques covered in class. We'll extend what you’ve learned by combining PCA as a preprocessing step to clustering using data that consist of measurements of cell nuclei of human breast masses
##Data input
Data is supplied on a CSV format:
# Save your input data file into your Project directory and store as wisc.df
```{r}
fna.data<-"WisconsinCancer.csv"
wisc.df<-read.csv(fna.data,row.names=1)
```
We do not want to be able to see the pathologist provided diagnosis as it is essentially our "answer" to the question of which cell smamples are cancerous.
# We can use -1 here to remove the first column
```{r}
wisc.data <- wisc.df[,-1]
```
# Create diagnosis vector for later 
```{r}
diagnosis<-as.factor(wisc.df$diagnosis)
```
Q1. How many observations are in this dataset?
```{r}
ans1<-nrow(wisc.df)
ans1
```

Q2. How many of the observations have a malignant diagnosis?
```{r}
table(wisc.df$diagnosis)
ans2<-212
ans2
```

Q3. How many variables/features in the data are suffixed with _mean?

```{r}
# Get the column names of the data frame
column_names <- names(wisc.df)
# Use grep to count the variables with "_mean" suffix
count_means <- sum(grepl("_mean$", column_names))
# Print 
count_means
```

```{r}
# Check column means and standard deviations
colMeans(wisc.data)
apply(wisc.data,2,sd)
```
We need to scale our input data before PCA as some of the columns are measures in terms of very different units with different means and variances. To do this here we set `scale=TRUE` argument to `prcomp()`.
```{r}
# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(wisc.data,scale=TRUE)
#look at summary of results
summary(wisc.pr)
```


Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?
```{r}
0.4427
```

Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?
```{r}
3
```


Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?
7
Let's create a biplot of the `wisc.pr` using the `biplot()` function.
```{r}
biplot(wisc.pr)
```
Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?
The plot is very messy and hard to understand due to all the points compacted and names squeezed into a small space. Too many things are going on for the plot to be understood and no data can be read effectively. 

lets generate a more standard scatter plot of each observation along principal components 1 and 2 and color the points by the diagnosis 
# Scatter plot observations by components 1 and 2
```{r}
plot( wisc.pr$x[,1:2] , col = diagnosis, 
     xlab = "PC1", ylab = "PC2")
```
Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?
```{r}
# Repeat for components 1 and 3
plot(wisc.pr$x[,1:3 ], col = diagnosis, 
     xlab = "PC1", ylab = "PC3")
```
The colors indicating the diagnosis are clumped together (red and black).However, the second plot has more variance shown then the first which is indicated by a more clean cut in the first plot. 

let’s see if we can use the ggplot2 package to make a more fancy figure of these results. 
```{r}
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis

# Load the ggplot2 package
library(ggplot2)

# Make a scatter plot colored by diagnosis
ggplot(df) + 
  aes(PC1, PC2, col=diagnosis) + 
  geom_point()
```

In this exercise, we will produce scree plots showing the proportion of variance explained as the number of principal components increases. The data from PCA must be prepared for these plots, as there is not a built-in function in base R to create them directly from the PCA model.

Calculate the variance of each principal component by squaring the sdev component of `wisc.pr` (i.e. wisc.pr$sdev^2). Save the result as an object called `pr.var`.
```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```

Calculate the variance explained by each principal component by dividing by the total variance explained of all principal components. Assign this to a variable called `pve` and create a plot of variance explained for each principal component.
```{r}
# Variance explained by each principal component: pve
pve <- pr.var / sum(pr.var)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```

```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```
```{r}
## ggplot based graph
#install.packages("factoextra")
library(factoextra)
fviz_eig(wisc.pr, addlabels = TRUE)
```

Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?
```{r}
wisc.pr$rotation[,1]["concave.points_mean"]
```

Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?
```{r}
5
```

##Hierarchical clustering
The goal of this section is to do hierarchical clustering of the original data. As part of the preparation for hierarchical clustering, the distance between all pairs of observations are computed. Furthermore, there are different ways to link clusters together, with single, complete, and average being the most common linkage methods. 

First scale the `wisc.data` data and assign the result to `data.scaled`.
```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)
```

Calculate the (Euclidean) distances between all pairs of observations in the new scaled dataset and assign the result to data.dist.
```{r}
data.dist <- dist(data.scaled)
```
Create a hierarchical clustering model using complete linkage. Manually specify the method argument to hclust() and assign the results to wisc.hclust.
```{r}
wisc.hclust <- hclust(data.dist, method="complete")
wisc.hclust
```
Let’s use the hierarchical clustering model you just created to determine a height (or distance between clusters) where a certain number of clusters exists.
Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

```{r}
plot(wisc.hclust)
abline(h=19, col="red", lty=2)
```

The model has 4 clusters at a height of 19

##Selecting number of clusters
We will now compare the outputs from your hierarchical clustering model to the actual diagnoses. Normally when performing unsupervised learning like this, a target variable (i.e. known answer or labels) isn’t available. We do have it with this dataset, however, so it can be used to check the performance of the clustering model.

Use `cutree()` to cut the tree so that it has 4 clusters. Assign the output to the variable `wisc.hclust.clusters`.

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust,k=4)
```

We can use the table() function to compare the cluster membership to the actual diagnoses.
```{r}
table(wisc.hclust.clusters, diagnosis)
```
Here we picked four clusters and see that cluster 1 largely corresponds to malignant cells (with diagnosis values of 1) whilst cluster 3 largely corresponds to benign cells (with diagnosis values of 0).

Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10?
```{r}
wisc.hclust.clusters <- cutree(wisc.hclust,k=4)
table(wisc.hclust.clusters, diagnosis)
#4 is the best clustering number
```
##Using different methods
We can use to combine points during the hierarchical clustering procedure. These include "single", "complete", "average" and "ward.D2"

Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.
"Ward.D2" gives my favorite results because it minimizes the increase in total cluster variance when two clusters are merged and therefor gives a cleaner looking cluster graph.
##K-means clustering
Now we will create a k-means clustering model on the Wisconsin breast cancer data and compare the results to the actual diagnoses and the results of your hierarchical clustering model.

Create a k-means model on wisc.data, assigning the result to wisc.km. 
```{r}
wisc.km <- kmeans(data.scaled, centers= 2, nstart= 20)
```
Use the table() function to compare the cluster membership of the k-means model (wisc.km$cluster) to the actual diagnoses contained in the diagnosis vector.
```{r}
table(wisc.km$cluster, diagnosis)
```
Q14. How well does k-means separate the two diagnoses? How does it compare to your hclust results?
k-means separates the two diagnoses well since there is similar clustering happening between the two clusters where one diagnosis is heavily favored over the other. hclust did not have the same clustering pattern when only 2 clusters were used. The clustering was not as well spearated and clear. 

Use the table() function to compare the cluster membership of the k-means model (wisc.km$cluster) to your hierarchical clustering model from above (wisc.hclust.clusters). Recall the cluster membership of the hierarchical clustering model is contained in wisc.hclust.clusters object.
```{r}
table(wisc.hclust.clusters,wisc.km$cluster)
```


##Combining methods
This approach will take not original data but our PCA results and work with them.

```{r}
d<-dist(wisc.pr$x[,1:3])
wisc.pr_hclust<-hclust(d,method="ward.D2")
plot(wisc.pr_hclust)
```

This looks much more promising than our previous clustering results on the original scaled data.
Generate 2 cluster groups from this hclust object 

```{r}
grps <- cutree(wisc.pr_hclust, k=2)
table(grps)
table(grps, diagnosis)
plot(wisc.pr$x[,1],wisc.pr$x[,2],col=grps)
plot(wisc.pr$x[,1:2], col=diagnosis)
```

 To match things up we can turn our groups into a factor and reorder the levels so cluster 2 comes first and thus gets the first color (black) and cluster 1 gets the second color (red).
 
```{r}
g <- as.factor(grps)
levels(g)
g <- relevel(g,2)
levels(g)
# Plot using our re-ordered factor 
plot(wisc.pr$x[,1:2], col=g)
```
 
```{r}
## Use the distance along the first 7 PCs for clustering i.e. wisc.pr$x[, 1:7]
wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:7]), method="ward.D2")
wisc.pr.hclust

```

Cut this hierarchical clustering model into 2 clusters and assign the results to wisc.pr.hclust.clusters.
```{r}
wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=2)
```

Using `table()`, compare the results from your new hierarchical clustering model with the actual diagnoses.

```{r}
# Compare to actual diagnoses
table(wisc.pr.hclust.clusters, diagnosis)
```
```{r}
table(wisc.hclust.clusters, diagnosis)
```

Q15. How well does the newly created model with four clusters separate out the two diagnoses?

The newly created model does a good job at separating out the two diagnoses as one diagnosis is heavily favored for the clusters. 
