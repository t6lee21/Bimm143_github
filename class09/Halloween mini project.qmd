---
title: "class 10 Halloween Mini-Project"
author: "Trinity Lee A16639698"
format: pdf
---

Exploratory Analysis of Halloween Candy
In this mini-project, we will explore FiveThirtyEight’s Halloween Candy dataset.

##1. Importing candy data
First things first, let’s get the data from the FiveThirtyEight GitHub repo. 

```{r}
candy_file <- "candy-data.csv"

candy = read.csv(candy_file, row.names=1)
head(candy)
```
Q1. How many different candy types are in this dataset?

```{r}
candy_types<-nrow(candy)
candy_types
```
Q2. How many fruity candy types are in the dataset?

```{r}
fruity_candy<-sum(candy$fruity)
fruity_candy
```

##2. What is your favorate candy?

One of the most interesting variables in the dataset is `winpercent`. For a given candy this value is the percentage of people who prefer this candy over another randomly chosen candy from the dataset. Higher values indicate a more popular candy.

We can find the `winpercent` value for Twix by using its name to access the corresponding row of the dataset.

```{r}
candy["Twix", ]$winpercent
```

Q3. What is your favorite candy in the dataset and what is it’s winpercent value?

```{r}
candy["Pixie Sticks", ]$winpercent
```

Q4. What is the winpercent value for “Kit Kat”?

```{r}
candy["Kit Kat", ]$winpercent
```

Q5. What is the winpercent value for “Tootsie Roll Snack Bars”?

```{r}
candy["Tootsie Roll Snack Bars", ]$winpercent
```

There is a useful `skim()` function in the skimr package that can help give you a quick overview of a given dataset. Let’s install this package and try it on our candy data.

```{r}
library("skimr")
skim(candy)
```
Q6. Is there any variable/column that looks to be on a different scale to the majority of the other columns in the dataset?

winpercent

Q7. What do you think a zero and one represent for the candy$chocolate column?

Candy types are 1 if the candy is that type and 0 if it is not. So a zero for the candy$chocolate column would mean that that candy is not chocolate and a one would mean that it is chocolate. 

A good place to start any exploratory analysis is with a histogram. You can do this most easily with the base R function `hist()`. Alternatively, you can use `ggplot()` with `geom_hist()`. 

Q8. Plot a histogram of winpercent values
```{r}
hist(candy$winpercent)
```
Q9. Is the distribution of winpercent values symmetrical?
The distribution of winpercent values is not symmetrical it is skewed right. 

Q10. Is the center of the distribution above or below 50%?
The center is below 50%

Q11. On average is chocolate candy higher or lower ranked than fruit candy?

```{r}
candy$winpercent[as.logical(candy$chocolate)]
mean(candy$winpercent[as.logical(candy$chocolate)])
candy$winpercent[as.logical(candy$fruity)]
mean(candy$winpercent[as.logical(candy$fruity)])
t.test(candy$winpercent[as.logical(candy$fruity)],candy$winpercent[as.logical(candy$chocolate)])
```
chocolate candy is ranked higher

Q12. Is this difference statistically significant?

The difference is statistically significant since the p-value is small (>0.5)

##3. Overall Candy Rankings

Let’s use the base R `order()` function together with `head()` to sort the whole dataset by `winpercent`

```{r}
head(candy[order(candy$winpercent),], n=5)
```
Q13. What are the five least liked candy types in this set?

Nik L Nip, Boston Baked Beans, Chiclets, Super Bubble, Jawbusters

Q14. What are the top 5 all time favorite candy types out of this set?

```{r}
tail(candy[order(candy$winpercent),], n=5)
```
Snickers, Kit Kat, Twix, Reese's Miniatures, Reese's Peanut Butter cup

To examine more of the dataset in this vain we can make a barplot to visualize the overall rankings. We will use an iterative approach to building a useful visulization by getting a rough starting plot and then refining and adding useful details in a stepwise process.

Q15. Make a first barplot of candy ranking based on winpercent values.

```{r}
library(ggplot2)
ggplot(candy) + 
  aes(winpercent, rownames(candy)) +
  geom_col()
```

Q16. This is quite ugly, use the reorder() function to get the bars sorted by winpercent?
```{r}
ggplot(candy) + 
  aes(winpercent, reorder(rownames(candy),winpercent)) +
  geom_col()
```

##Time to add some useful color
et’s setup a color vector (that signifies candy type) that we can then use for some future plots. We start by making a vector of all black values (one for each candy). Then we overwrite chocolate (for chocolate candy), brown (for candy bars) and red (for fruity candy) values.

```{r}
my_cols=rep("black", nrow(candy))
my_cols[as.logical(candy$chocolate)] = "chocolate"
my_cols[as.logical(candy$bar)] = "brown"
my_cols[as.logical(candy$fruity)] = "pink"
ggplot(candy) + 
  aes(winpercent, reorder(rownames(candy),winpercent)) +
  geom_col(fill=my_cols) 
```

- Q17. What is the worst ranked chocolate candy?
sixlets
- Q18. What is the best ranked fruity candy?
starburst

##4. Taking a look at pricepercent
What about value for money? What is the the best candy for the least money? One way to get at this would be to make a plot of `winpercent` vs the `pricepercent` variable. The `pricepercent` variable records the percentile rank of the candy’s price against all the other candies in the dataset. Lower vales are less expensive and high values more expensive.

To this plot we will add text labels so we can more easily identify a given candy. There is a regular `geom_label()` However, as there are quite a few candys in our dataset lots of these labels will be overlapping and hard to read. To help with this we can use the `geom_text_repel()` function from the `ggrepel` package

```{r}
library(ggrepel)

# How about a plot of price vs win
ggplot(candy) +
  aes(winpercent, pricepercent, label=rownames(candy)) +
  geom_point(col=my_cols) + 
  geom_text_repel(col=my_cols, size=3.3, max.overlaps = 5)
```

Q19. Which candy type is the highest ranked in terms of winpercent for the least money - i.e. offers the most bang for your buck?
Reese's miniatures

Q20. What are the top 5 most expensive candy types in the dataset and of these which is the least popular?

```{r}
ord <- order(candy$pricepercent, decreasing = TRUE)
head( candy[ord,c(11,12)], n=5 )
```
Nik L Nip is the least popular of these (lowest winpercent)

Q21. Make a barplot again with geom_col() this time using pricepercent and then improve this step by step, first ordering the x-axis by value and finally making a so called “dot chat” or “lollipop” chart by swapping geom_col() for geom_point() + geom_segment().

```{r}
ggplot(candy) + 
  aes(pricepercent, reorder(rownames(candy),pricepercent)) +
  geom_col()
# Make a lollipop chart of pricepercent
ggplot(candy) +
  aes(pricepercent, reorder(rownames(candy), pricepercent)) +
  geom_segment(aes(yend = reorder(rownames(candy), pricepercent), 
                   xend = 0), col="gray40") +
    geom_point()
```

##5 Exploring the correlation structure

Now that we’ve explored the dataset a little, we’ll see how the variables interact with one another. We’ll use correlation and view the results with the `corrplot` package to plot a correlation matrix.

```{r}
library(corrplot)
cij <- cor(candy)
corrplot(cij)
```

Q22. Examining this plot what two variables are anti-correlated (i.e. have minus values)?
Chocolate and fruity
Q23. Similarly, what two variables are most positively correlated?
Winpercent and chocolate are the most positively correlated disregarding the variables compared with themselves

##6. Principal Component Analysis

```{r}
pca <- prcomp(candy, scale=FALSE)
summary(pca)
```
Now we can plot our main PCA score plot of PC1 vs PC2.

```{r}
plot(pca$x[,1:2])
```

We can change the plotting character and add some color:

```{r}
plot(pca$x[,1:2], col=my_cols, pch=16)
```

We can make a much nicer plot with the `ggplot2` package but it is important to note that ggplot works best when you supply an input data.frame that includes a separate column for each of the aesthetics you would like displayed in your final plot. To accomplish this we make a new data.frame here that contains our PCA results with all the rest of our candy data.

```{r}
# Make a new data-frame with our PCA results and candy data
my_data <- cbind(candy, pca$x[,1:3])
z <- ggplot(my_data) + 
        aes(x=PC1, y=PC2, 
            size=winpercent/100,  
            text=rownames(my_data),
            label=rownames(my_data)) +
        geom_point(col=my_cols)

z
```

 we can use the `ggrepel` package and the `function ggrepel::geom_text_repel()` to label up the plot with non overlapping candy names like
```{r}
library(ggrepel)

z + geom_text_repel(size=3.3, col=my_cols, max.overlaps = 7)  + 
  theme(legend.position = "none") +
  labs(title="Halloween Candy PCA",
       subtitle="Colored by type: chocolate bar (dark brown), chocolate other (light brown), fruity (red), other (black)",
       caption="Data from 538 data set")
```
 
 more candy labels you can change the max.overlaps value to allow more overlapping labels or pass the ggplot object z to `plotly` like so to generate an interactive plot that you can mouse over to see labels:
 
```{r}
library(plotly)
#ggplotly(z)
```
 
 Let’s finish by taking a quick look at PCA our loadings. 
 
```{r}
par(mar=c(8,4,2,2))
barplot(pca$rotation[,1], las=2, ylab="PC1 Contribution")
```
 
Q24. What original variables are picked up strongly by PC1 in the positive direction? Do these make sense to you?

Fruity, hard, and pluribus are picked up strongly by PC1 in the positive direction which makes sense because most fruity candies are in multiples and are hard - all characteristics of fruity candies. 
 
 